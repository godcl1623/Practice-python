# DFS(깊이 우선 탐색)
'''
  - 스택 자료구조를 사용해 그래프의 깊은 곳(= 먼 곳)부터 탐색
  - 작동 방식(단, 탐색은 번호가 낮은 순서대로 진행한다)
    1. 탐색 시작 노드를 스택에 추가 및 방문 처리
    2. 스택 최상단 노드의 인접 노드 중 미방문 노드가 있다면 스택에 추가 및 방문 처리, 미방문 노드가 없다면 스택에서 제거
    3. 2의 과정을 더 이상 할 수 없을 때까지 반복
  - 특징
    1. 노드 탐색 시 번호가 낮은 순서대로 탐색
    2. 재귀 함수를 통해 간단하게 구현 가능
    3. 탐색 시간 O(N)
'''
graph = [
  [],
  [2, 3, 8],
  [1, 7],
  [1, 4, 5],
  [3, 5],
  [3, 4],
  [7],
  [2, 6, 8],
  [1, 7]
]
'''
  cf) 그래프 종류
  1. 인접 행렬: 2차원 배열로 그래프 연결 관계 표현
    - 모든 자료구조 저장 => 현재 노드부터 각 노드가 떨어진 거리를 표시
    - '거리' 언급 / INF 혹은 999999999 등 다른 수보다 현저히 큰 숫자를 사용하는 경우 인접 행렬임을 알 수 있음
    - 스택 자료구조를 사용
    - 예시
      graph = [
        [0, 7, 5],
        [7, 0, INF],
        [5, INF, 0]
      ]
      - graph의 인덱스 0을 보면 인덱스 0의 거리가 0(자신이므로), 인덱스 1의 거리가 7, 인덱스 2의 거리가 5
      - graph의 인덱스 1을 보면 인덱스 0의 거리가 7(인덱스 0과 대응), 인덱스 2의 거리가 INF(엄청 큰 숫자, 연결되지 않았음을 의미)
  2. 인접 리스트: 리스트로 그래프 연결 관계 표현
    - 각 노드에 연결된 노드 정보만 저장
    - (연결)리스트를 사용해 저장
    - 리스트 자체는 인접 행렬보다 메모리 효율적이나, 연결 정보 탐색에 시간이 걸림
    - 예시
      graph = [
        [],
        [2, 3, 8],
        [1, 7]
        [1, 4, 5],
        [3, 5],
        [3, 4],
        [7],
        [2, 6, 8],
        [1, 7]
      ]
      - 인덱스 0은 실제로 사용하지 않으므로 []로 표시
      - 인덱스 1은 인덱스 2, 3, 8과 연결되어있음을 의미
'''
# BFS(너비 우선 탐색)
'''
  - 깊이 우선 탐색과 다르게 가까운 곳을 우선적으로 탐색
  - 큐 자료구조를 사용해 구현하나, 파이썬은 collections - deque를 사용하면 편함
  - 작동 방식
    1. 시작 노드를 큐에 추가한 후 방문 처리
    2. 큐에서 최상위 노드(= 가장 먼저 들어온 노드)를 제거한 후 인접 노드를 모두 큐에 추가 및 방문 처리
    3. 2의 과정을 더이상 할 수 없을 때까지 반복
  - 특징
    - 큐 자료구조 이용
    - 이론상 속도는 O(N)이나, 실제 구동 속도는 DFS보다 좀 더 빠름
'''
def dfs(graph, start, visited):
  visited[start] = True
  print(start, end=' ')
  for i in graph[start]:
    if not visited[i]:
      dfs(graph, i, visited)

def bfs(graph, start, visited):
  from collections import deque
  q = deque([start])
  visited[start] = True
  while q:
    v = q.popleft()
    print(v, end=' ')
    for i in graph[v]:
      if not visited[i]:
        q.append(i)
        visited[i] = True

visited = [False] * 9
dfs(graph, 1, visited)
print()
visited = [False] * 9
bfs(graph, 1, visited)