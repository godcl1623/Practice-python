'''
오답현황(~)
전체적으로 복습(274, 275 제외)
'''
'''
271 Account 클래스
은행에 가서 계좌를 개설하면 은행이름, 예금주, 계좌번호, 잔액이 설정됩니다. Account 클래스를 생성한 후 생성자를 구현해보세요. 생성자에서는 예금주와 초기 잔액만 입력 받습니다. 은행이름은 SC은행으로 계좌번호는 3자리-2자리-6자리 형태로 랜덤하게 생성됩니다.

은행이름: SC은행
계좌번호: 111-11-111111
(힌트: random모듈, randint 메서드, zfill 이용)
'''

'''
272 클래스 변수(못풂)
클래스 변수를 사용해서 Account 클래스로부터 생성된 계좌 객체의 개수를 저장하세요.
(힌트: 클래스 변수란 클래스 내부에서 선언된 변수로, 모든 인스턴스가 공유하는 변수를 말함)
'''

'''
273 클래스 변수 출력(못풂)
Account 클래스로부터 생성된 계좌의 개수를 출력하는 get_account_num() 메서드를 추가하세요.
(힌트: 클래스 변수를 출력)
'''

'''
274 입금 메서드
Account 클래스에 입금을 위한 deposit 메서드를 추가하세요. 입금은 최소 1원 이상만 가능합니다.
'''

'''
275 출금 메서드
Account 클래스에 출금을 위한 withdraw 메서드를 추가하세요. 출금은 계좌의 잔고 이상으로 출금할 수는 없습니다.
'''

'''
276 정보 출력 메서드(못풂)
Account 인스턴스에 저장된 정보를 출력하는 display_info() 메서드를 추가하세요. 잔고는 세자리마다 쉼표를 출력하세요.

은행이름: SC은행
예금주: 파이썬
계좌번호: 111-11-111111
잔고: 10,000원
(힌트: 답지에도 방법이 안나옴 - 따로 궁리 필요)
'''

'''
277 이자 지급하기(못풂)
입금 횟수가 5회가 될 때 잔고를 기준으로 1%의 이자가 잔고에 추가되도록 코드를 변경해보세요.
(힌트: 입금 횟수를 추적할 클래스 변수를 선언한 후 이용)
'''

'''
278 여러 객체 생성
Account 클래스로부터 3개 이상 인스턴스를 생성하고 생성된 인스턴스를 리스트에 저장해보세요.(단, append를 이용하자)
'''

'''
279 객체 순회
반복문을 통해 리스트에 있는 객체를 순회하면서 잔고가 100만원 이상인 고객의 정보만 출력하세요.(잔고는 자유롭게 입력하면 된다.)
'''

'''
280 입출금 내역
입금과 출금 내역이 기록되도록 코드를 업데이트 하세요. 입금 내역과 출금 내역을 출력하는 deposit_history와 withdraw_history 메서드를 추가하세요.
(힌트: withdraw, deposit 수정 및 클래스 변수, 새 메서드 추가)
'''
